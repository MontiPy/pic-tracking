// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Supplier {
  id          String    @id @default(cuid())
  name        String    @unique
  contactInfo String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  supplierProjects SupplierProject[]

  @@map("suppliers")
}

model Project {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  supplierProjects SupplierProject[]
  taskTemplates    TaskTemplate[]

  @@map("projects")
}

model SupplierProject {
  id         String    @id @default(cuid())
  supplierId String
  projectId  String
  assignedAt DateTime  @default(now())
  status     String    @default("active")

  // Relationships
  supplier      Supplier       @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskInstances TaskInstance[]

  @@unique([supplierId, projectId])
  @@map("supplier_projects")
}

model TaskType {
  id          String    @id @default(cuid())
  name        String    @unique
  category    String    // "Part Approval", "Production Readiness", "New Model Builds", "General"
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  taskTemplates TaskTemplate[]

  @@map("task_types")
}

model TaskTemplate {
  id            String    @id @default(cuid())
  taskTypeId    String
  projectId     String
  canonicalDue  DateTime
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  taskType      TaskType       @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskInstances TaskInstance[]

  @@unique([taskTypeId, projectId])
  @@map("task_templates")
}

model TaskInstance {
  id                String    @id @default(cuid())
  supplierProjectId String
  taskTemplateId    String
  status            String    @default("not_started") // "not_started", "in_progress", "completed", "blocked", "cancelled"
  actualDue         DateTime? // Inherited from template, can be overridden
  completedAt       DateTime?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  supplierProject SupplierProject @relation(fields: [supplierProjectId], references: [id], onDelete: Cascade)
  taskTemplate    TaskTemplate    @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)

  @@unique([supplierProjectId, taskTemplateId])
  @@map("task_instances")
}