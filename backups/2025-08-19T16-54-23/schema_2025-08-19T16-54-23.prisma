// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums for the new schema
enum AnchorType {
  PROJECT_START
  MILESTONE_DATE
  RELATIVE_TO_TASK
}

enum TaskStatus {
  not_started
  in_progress
  completed
  blocked
  cancelled
}

// Enhanced Supplier model with manufacturing details
model Supplier {
  id             String    @id @default(cuid())
  name           String    @unique
  supplierNumber String?   @unique  // Unique supplier identifier (optional for migration)
  location       String?              // Facility/address location (optional for migration)
  contacts       String?              // JSON string of contact objects (optional for migration)
  contactInfo    String               // Keep for backward compatibility
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relationships
  supplierProjectInstances SupplierProjectInstance[]
  
  // Old relationships (for migration compatibility)
  supplierProjects SupplierProject[]

  // Indexes for performance
  @@index([name]) // For search functionality
  @@index([supplierNumber]) // For supplier number lookups
  @@index([updatedAt]) // For recent activity queries
  @@map("suppliers")
}

// Project model with new relationships
model Project {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // New relationships (V2)
  supplierProjectInstances SupplierProjectInstance[]
  projectTaskTypes         ProjectTaskType[]
  projectTaskTemplates     ProjectTaskTemplate[]
  
  // Old relationships (for migration compatibility)
  projectMilestoneTasks    ProjectMilestoneTask[]
  supplierProjects SupplierProject[]
  taskTemplates    TaskTemplate[]

  // Indexes for performance
  @@index([name]) // For project lookups
  @@index([updatedAt]) // For recent activity
  @@map("projects")
}

// Enhanced TaskType model (V2)
model TaskType {
  id          String    @id @default(cuid())
  name        String    @unique
  category    String    // "Part Approval", "Production Readiness", "New Model Builds", "General"
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // New relationships (V2)
  sections    TaskTypeSection[]
  tasks       Task[]
  projectTaskTypes ProjectTaskType[]
  
  // Old relationships (for migration compatibility)
  milestones Milestone[]
  taskTemplates TaskTemplate[]

  // Indexes for performance
  @@index([category]) // For filtering by category
  @@index([name]) // For task type lookups
  @@map("task_types")
}

// New Milestone model (PA2, PA3, PA4, etc.)
model Milestone {
  id          String    @id @default(cuid())
  taskTypeId  String
  code        String    // "PA2", "PA3", "PA4", "NMR1", etc.
  name        String    // "First Article", "Production Trial", etc.
  description String?
  sequence    Int       // Order within task type
  isRequired  Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  taskType              TaskType @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  tasks                 Task[]
  projectMilestoneTasks ProjectMilestoneTask[]

  // Indexes for performance
  @@index([taskTypeId]) // For task type queries
  @@index([code]) // For milestone code lookups
  @@index([sequence]) // For ordering
  @@unique([taskTypeId, code]) // Unique milestone code per task type
  @@map("milestones")
}

// New TaskTypeSection model (replaces Milestone)
model TaskTypeSection {
  id         String  @id @default(cuid())
  taskTypeId String
  name       String
  sequence   Int
  description String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  taskType   TaskType @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  tasks      Task[]
  
  @@unique([taskTypeId, name])
  @@index([taskTypeId, sequence])
  @@map("task_type_sections")
}

// Updated Task model (V2) with sub-task support
model Task {
  id             String    @id @default(cuid())
  taskTypeId     String
  sectionId      String?   // Optional section grouping
  parentTaskId   String?   // for sub-tasks (1 level)
  name           String    // "Gage R&R Submission", "Drawing Approval", etc.
  description    String?
  sequence       Int       // Order within section/tasktype
  defaultOwner   String?   // Default responsible party
  defaultNotes   String?   // Default task notes
  isRequired     Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // New relationships (V2)
  taskType       TaskType @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  section        TaskTypeSection? @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  parent         Task? @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks       Task[] @relation("SubTasks")
  projectTaskTemplates ProjectTaskTemplate[]
  
  // Old relationships (for migration compatibility)
  milestoneId           String?
  milestone             Milestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  projectMilestoneTasks ProjectMilestoneTask[]

  // Indexes for performance
  @@index([taskTypeId, sectionId])
  @@index([parentTaskId]) // for sub-task queries
  @@index([name]) // For task name lookups
  @@index([sequence]) // For ordering
  @@index([milestoneId]) // For milestone queries (legacy)
  @@unique([taskTypeId, name, parentTaskId]) // Unique task name per tasktype/parent
  @@unique([milestoneId, name]) // Unique task name per milestone (legacy)
  @@map("tasks")
}

// ProjectTaskType model (many-to-many between projects and task types)
model ProjectTaskType {
  id         String @id @default(cuid())
  projectId  String
  taskTypeId String
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskType   TaskType @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, taskTypeId])
  @@index([projectId])
  @@index([taskTypeId])
  @@map("project_task_types")
}

// Simplified ProjectTaskTemplate model (V2)
model ProjectTaskTemplate {
  id         String  @id @default(cuid())
  projectId  String
  taskId     String
  sectionId  String?  // convenience copy for grouping
  dueDate    DateTime // canonical per project
  owner      String?
  notes      String?
  isActive   Boolean @default(true)
  
  // Optional relative scheduling
  anchor     AnchorType @default(PROJECT_START)
  offsetDays Int?
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  task       Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  supplierTaskInstances SupplierTaskInstance[]
  
  @@unique([projectId, taskId])
  @@index([projectId, sectionId])
  @@index([projectId, dueDate])
  @@index([taskId])
  @@index([dueDate])
  @@map("project_task_templates")
}

// Project Template: Milestone-Task with Due Dates (Legacy - for migration)
model ProjectMilestoneTask {
  id          String    @id @default(cuid())
  projectId   String
  milestoneId String
  taskId      String
  dueDate     DateTime  // Set at project level for consistency
  isActive    Boolean   @default(true)
  notes       String?
  responsibleParties String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  project               Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  milestone             Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  task                  Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  supplierTaskInstances SupplierTaskInstance[]

  // Indexes for performance
  @@index([projectId]) // For project queries
  @@index([milestoneId]) // For milestone queries
  @@index([taskId]) // For task queries
  @@index([dueDate]) // For due date sorting
  @@index([projectId, dueDate]) // Composite for project timeline views
  @@unique([projectId, milestoneId, taskId]) // Unique task per project milestone
  @@map("project_milestone_tasks")
}

// Supplier Project Instance (replaces SupplierProject)
model SupplierProjectInstance {
  id         String    @id @default(cuid())
  supplierId String
  projectId  String
  status     String    @default("active")
  assignedAt DateTime  @default(now())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relationships
  supplier              Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  project               Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  supplierTaskInstances SupplierTaskInstance[]

  // Indexes for performance
  @@index([supplierId]) // For supplier-centric queries
  @@index([projectId]) // For project-centric queries
  @@index([status]) // For filtering by status
  @@index([assignedAt]) // For chronological queries
  @@unique([supplierId, projectId]) // One instance per supplier-project pair
  @@map("supplier_project_instances")
}

// Supplier Task Instance (V2 with dual relationships during migration)
model SupplierTaskInstance {
  id                        String    @id @default(cuid())
  supplierProjectInstanceId String
  
  // New relationship (V2)
  projectTaskTemplateId     String?
  
  // Legacy relationship (for migration compatibility)
  projectMilestoneTaskId    String?
  
  status        TaskStatus  @default(not_started)
  dueDate       DateTime    // inherited copy
  actualDueDate DateTime?   // override
  owner         String?
  notes         String?
  isApplied     Boolean     @default(true)
  blockedReason String?
  submissionFiles Json?     // JSON for file attachments
  completedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relationships
  supplierProjectInstance SupplierProjectInstance @relation(fields: [supplierProjectInstanceId], references: [id], onDelete: Cascade)
  
  // New relationship (V2)
  projectTaskTemplate     ProjectTaskTemplate? @relation(fields: [projectTaskTemplateId], references: [id], onDelete: Cascade)
  
  // Legacy relationship (for migration compatibility)
  projectMilestoneTask    ProjectMilestoneTask? @relation(fields: [projectMilestoneTaskId], references: [id], onDelete: Cascade)

  // Critical indexes for performance
  @@index([supplierProjectInstanceId, status])
  @@index([supplierProjectInstanceId, dueDate])
  @@index([actualDueDate]) // for override tracking
  @@index([status, dueDate]) // Composite for overdue task queries
  @@index([projectTaskTemplateId]) // New V2 relationship
  @@index([projectMilestoneTaskId]) // Legacy relationship
  @@index([isApplied]) // For applied/unapplied task filtering
  @@index([updatedAt]) // For recent activity tracking
  @@index([completedAt]) // For completion date queries
  @@unique([supplierProjectInstanceId, projectTaskTemplateId]) // V2 unique constraint
  @@unique([supplierProjectInstanceId, projectMilestoneTaskId]) // Legacy unique constraint
  @@map("supplier_task_instances")
}

// Keep old models for migration compatibility (will be removed later)
model SupplierProject {
  id         String    @id @default(cuid())
  supplierId String
  projectId  String
  assignedAt DateTime  @default(now())
  status     String    @default("active")

  // Relationships
  supplier      Supplier       @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskInstances TaskInstance[]

  @@unique([supplierId, projectId])
  @@index([supplierId])
  @@index([projectId])
  @@index([status])
  @@index([assignedAt])
  @@map("supplier_projects_old")
}

model TaskTemplate {
  id            String    @id @default(cuid())
  taskTypeId    String
  projectId     String
  canonicalDue  DateTime
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  taskType      TaskType       @relation(fields: [taskTypeId], references: [id], onDelete: Cascade)
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskInstances TaskInstance[]

  @@unique([taskTypeId, projectId])
  @@index([projectId])
  @@index([taskTypeId])
  @@index([canonicalDue])
  @@index([projectId, canonicalDue])
  @@map("task_templates_old")
}

model TaskInstance {
  id                String    @id @default(cuid())
  supplierProjectId String
  taskTemplateId    String
  status            String    @default("not_started")
  actualDue         DateTime?
  completedAt       DateTime?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  supplierProject SupplierProject @relation(fields: [supplierProjectId], references: [id], onDelete: Cascade)
  taskTemplate    TaskTemplate    @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)

  @@unique([supplierProjectId, taskTemplateId])
  @@index([status])
  @@index([actualDue])
  @@index([supplierProjectId])
  @@index([taskTemplateId])
  @@index([status, actualDue])
  @@index([supplierProjectId, status])
  @@index([updatedAt])
  @@index([completedAt])
  @@map("task_instances_old")
}
